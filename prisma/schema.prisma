// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model APIKey {
  id        String   @id @default(cuid())
  key       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
}

model Project {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String   @db.Text
  apiKeys     APIKey[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  prompts     Prompt[]
}

model Prompt {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  project     Project  @relation(fields: [projectId], references: [id])
  projectId   String
  commits     Commit[]
}

model Commit {
  id          String   @id @default(cuid())
  prompt      Prompt   @relation(fields: [promptId], references: [id])
  promptId    String
  description String?
  messages    Message[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  publishedCommits   PublishedCommit[]
}

model PublishedCommit {
  id          String   @id @default(cuid())
  commit      Commit   @relation(fields: [commitId], references: [id])
  commitId    String
  environment String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Message {
  id        String   @id @default(cuid())
  commit    Commit   @relation(fields: [commitId], references: [id])
  commitId  String
  role      String   @default("system")
  content   String   @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}